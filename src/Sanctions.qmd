---
title: "Sanctions"
format: html
editor: visual
---

## Setup

```{r}
#|: installing-necessary-pkgs
# only run once
# uncomment with ctrl-shift-c/cmd-shift-c

# install.packages("tidyverse") 
# install.packages("tidymodels")
# install.packages("writexl")
# install.packages("lubridate")
# install.packages("wbstats") # for country GDPs from World Bank
# install.packages("reticulate") # for running python stuff
# install.packages("tempdisagg") # for freq conv
# install.packages("tsbox") # for time-series visualizations
# install.packages("zoo") # also for freq conv
# install.packages("Hmisc") # date manipulations 
```

```{r message = FALSE}
#|: loading-pkgs

library(tidyverse) 
library(tidymodels)
library(writexl)
library(lubridate)
library(wbstats)
library(reticulate)
library(tempdisagg) 
library(tsbox) 
library(zoo)
library(Hmisc)
```

```{r message = FALSE}
#|: importing-python-pkgs-to-run-modules-using-R

### OLD: LEAVE COMMENTED OUT
# os <- import("os")
# imf <- import("imf")
# json <- import("json")
# my_input <- import("my_input")
# datetime <- import("datetime")
# comtrade <- import("comtrade")
# fromcomtradepkg <- import("fromcomtradepkg")

virtualenv_create("my-environment")
use_virtualenv("my-environment")
py_install("export_ease")
py_install("pandas")
py_install("requests")
py_install("flatten_json")
py_install("comtradeapicall")
```

## Comtrade

```{python}
#|: setting-up-comtrade.py

from export_ease.comtrade import Comtrade
comtrade_obj = Comtrade()
```

```{python}
#|: running-comtrade-all-exports
# total-exports file format: comtrade_total_{year}{freq}

comtrade_obj.get_all_exports() # writes csv file containing all country-pair export data
```

```{python}
#|: running-comtrade-total-exports
# per-country exports file format: comtrade_{year}{freq} 

comtrade_obj.get_total_exports() # writes csv file containing total-export values for each country
```

```{r}
#|: function-to-clean-and-write-over-comtrade-files
# file name passed into function must not include extension
# will result in an error if the file is already clean

clean_comtrade <- function(file) {
  file <- file.path(dirname(getwd()), "data", file)
  csv <- paste(file, "csv", sep = ".")
  excel <- paste(file, "xlsx", sep = ".")
  df <- read_csv(csv) |> select(freqCode, refPeriodId, refYear, refMonth, reporterCode, reporterISO, reporterDesc, flowDesc, partnerCode, partnerISO, partnerDesc, cmdDesc, primaryValue)
  df <- df |> drop_na(primaryValue)
  df$date <- ymd(df$refPeriodId)
  df$date <- as.Date(df$date)
  df <- df |> 
    mutate(value = primaryValue, reporter = reporterDesc, partner = partnerDesc) |> 
    select(date, value, reporter, partner)
  df$date <- as.Date(df$date)
  write_csv(df, csv)
  write_xlsx(df, excel)
  return(df)
}
```

```{r message = FALSE}
#|: applying-above-function-to-all-new-comtrade-files
# file names must be changed depending on queries (year, freq)
# primaryValue numbers in scientific notation ok for calculations
# in USD + months/years (depends on query)

file <- "comtrade_all_exports_2021A"
comtrade_pairs_annual <- data.frame()
comtrade_pairs_annual <- clean_comtrade(file)
# view(comtrade_pairs_annual)

file <- "comtrade_all_exports_2021M"
comtrade_pairs_monthly <- data.frame()
comtrade_pairs_monthly <- clean_comtrade(file)
# view(comtrade_pairs_monthly)

file <- "comtrade_total_exports_2021A"
comtrade_total_annual <- data.frame()
comtrade_total_annual <- clean_comtrade(file)
# view(comtrade_total_annual)

file <- "comtrade_total_exports_2021M"
comtrade_total_monthly <- data.frame()
comtrade_total_monthly <- clean_comtrade(file)
# view(comtrade_total_monthly)
```

## IMF

```{python}
#|: setting-up-imf

from export_ease.imf import IMF
imf_obj = IMF()
```

```{python}
#|: running-imf-total-exports
# total-exports file format: imf_total_exports_{year}{freq}

imf_obj.get_total_exports() # writes csv file containing total-export values for each country
```

```{python}
#|: running-imf-reporter-exports
# exports from one reporter to all partners file format: imf_{country}_all_exports_{year}{freq}
# quirk: if freq is annual and year is within 3 years of current year, function will return data starting from 3 years prior (e.g., if requesting annual data for France starting in 2021, it'll return data from 2020 to current day)

imf_obj.get_reporter_exports() # writes csv file with export data for reporter to all partners
```

```{r}
#|: function-used-by-clean_imf-to-add-country-names-to-final-df
# never call this yourself -> all calls to this function will be nested w/in clean_imf

add_countries <- function(clean) {
  country_codes <- "imf_country_codes.csv"
  countries <- read_csv(file.path(dirname(getwd()), "data", country_codes))
  colnames(countries)[1] <- "Names"
  colnames(countries)[2] <- "Codes"
  combo <- left_join(clean, countries, by = c("REF_AREA" = "Codes"))  
  combo$reporter <- combo$Names
  combo$reporter_code <- combo$REF_AREA
  combo <- subset(combo, select = -c(Names, REF_AREA))
  combo <- left_join(combo, countries, by = c("COUNTERPART_AREA" = "Codes"))
  combo$partner <- combo$Names
  combo$partner_code <- combo$COUNTERPART_AREA
  combo <- subset(combo, select = -c(Names, COUNTERPART_AREA))
  combo <- combo |> select(date, value, reporter, partner)
  combo$date <- as.Date(combo$date)
  return(combo)
}
```

```{r message = FALSE}
#|: function-to-clean-and-write-over-imf-files
# file name passed into function must not include extension
# will result in an error if the file is already clean
# multiply by 1 MM to get USD

clean_imf <- function(file) {
  file <- file.path(dirname(getwd()), "data", file)
  csv <- paste(file, "csv", sep = ".")
  excel <- paste(file, "xlsx", sep = ".")
  df <- read_csv(csv)
  df <- df[,-c(1,6:7)]
  for (i in 1:length(colnames(df))) {
    sub = str_sub(colnames(df)[i], end = 3)
    if (sub == "Obs") {
      new_name = str_sub(colnames(df)[i], 5)
      beg = str_sub(new_name, end = 2)
      sub = str_sub(new_name, 3)
      colnames(df)[i] = paste(beg, sub, sep = "")
    }
    else {
      colnames(df)[i] = str_sub(colnames(df)[i], 2)
    }
  }
  common <- c("FREQ", "REF_AREA", "INDICATOR", "COUNTERPART_AREA")
  time <- df |> select(all_of(common), ends_with("TIME_PERIOD")) 
  time <- time |>
    pivot_longer(
      cols = -c("FREQ", "REF_AREA", "INDICATOR", "COUNTERPART_AREA"),
      names_sep = "@",
      names_to = c("category", "time"),
      values_to = "date"
    )
  time$category <- gsub("_", "", time$category)
  time <- time[,-6]
  obs <- df |> select(all_of(common), ends_with("OBS_VALUE"))
  obs <- obs |>
    pivot_longer(
      cols = -c("FREQ", "REF_AREA", "INDICATOR", "COUNTERPART_AREA"),
      names_sep = "@",
      names_to = c("category", "obs"),
      values_to = "value"
    )
  obs$category <- gsub("_", "", obs$category)
  obs <- obs[,-6]
  clean <- left_join(time, obs, by = c(all_of(common), "category"))
  clean <- clean |> drop_na(date, value)
  clean$value <- clean$value * 1000000
  if (str_sub(file, -1) == "M") {
    clean$month <- month(ym(clean$date))
    clean$year <- year(ym(clean$date))
    clean$date <- ym(clean$date)
    clean$date <- as.Date(clean$date)
  } else {
    clean$year <- clean$date
    clean$date <- ymd(clean$year, truncated = 2L)
    clean$date <- as.Date(clean$date)
  }
  clean <- subset(clean, select = -c(category, INDICATOR))
  total <- add_countries(clean)
  write_csv(total, csv)
  write_xlsx(total, excel)
  return(total)
}
```

```{r message = FALSE, warning = FALSE}
#|: applying-above-function-to-all-new-imf-files
# file names must be changed depending on queries (year, freq)
# in USD + months/years (depends on query)

file <- "imf_total_exports_2021M"
imf_total_monthly <- data.frame()
imf_total_monthly <- clean_imf(file)
# view(imf_total_monthly)

file <- "imf_total_exports_2021A"
imf_total_annual <- data.frame()
imf_total_annual <- clean_imf(file)
# view(imf_total_annual)

file <- "imf_FR_all_exports_2021M"
imf_fr_all_monthly <- data.frame()
imf_fr_all_monthly <- clean_imf(file)
# view(imf_fr_all_monthly)

file <- "imf_FR_all_exports_2021A"
imf_fr_all_annual <- data.frame()
imf_fr_all_annual <- clean_imf(file)
# view(imf_fr_all_annual)
```

## World Bank

```{r}
#|: for-finding-stuff-in-wbstats
# in USD + years

# wb_search("Export") |> view()
# wb_search("GDP") |> view()
# str(wb_cachelist, max.level = 1)
# wb_indicators <- wb_cachelist$indicators |> view()
```

```{r}
#|: function-to-get-and-write-files-containing-total-exports-and-gdp-data-from-world-bank
# total-exports file format: wb_total_exports
# gdp file format: wb_gdp

get_wb <- function(years, df_to_return) { 
  gdp <- c("GDP" = "NY.GDP.MKTP.CD")
  exports <- c("total_exports" ="BX.GSR.GNFS.CD")
  indicators <- c(gdp, exports)
  both <- wb_data(
    indicators, 
    country = "all",
    mrv = years
  )
  both <- both |> filter(!is.na(iso2c))
  both$year <- both$date
  both$date <- ymd(both$year, truncated = 2L)
  both$date <- as.Date(both$date)
  both <- both |> relocate(iso2c, iso3c, country, year, date, GDP, total_exports)
  gdp <- both[, -7] |> 
    drop_na(GDP) |> 
    mutate(reporter = country) |> 
    select(date, GDP, reporter)
  gdp_name <- file.path(dirname(getwd()), "data", "wb_gdp")
  print(paste("Writing wb_gdp", as.character(years), "....", sep = ""))
  gdp_csv = paste(gdp_name, as.character(years), ".csv", sep = "")
  gdp_excel = paste(gdp_name, as.character(years), ".xlsx", sep = "")
  write_csv(gdp, gdp_csv)
  write_xlsx(gdp, gdp_excel)
  total_exports <- both[, -6] |> 
    drop_na(total_exports) |> 
    mutate(reporter = country) |> 
    select(date, total_exports, reporter)
  exports_name <- file.path(dirname(getwd()), "data", "wb_total_exports")
  print(paste("Writing wb_total_exports", as.character(years), "....", sep = ""))
  exports_csv = paste(exports_name,  as.character(years), ".csv", sep = "")
  exports_excel = paste(exports_name,  as.character(years), ".xlsx", sep = "")
  write_csv(total_exports, exports_csv)
  write_xlsx(total_exports, exports_excel)
  if (df_to_return == "gdp") {
    print(paste("Returning wb_gdp", as.character(years), "....", sep = ""))
    return(gdp)
  }
  print(paste("Returning wb_total_exports", as.character(years), "....", sep = ""))
  return(total_exports)
}
```

```{r}
#|: using-above-function-to-get-GDPs-and-total-exports-from-world-bank
# years argument specifies how many years you want data for, starting at the most recent year that has complete data (e.g., get_wb(3) will get data for 2019, 2020, and 2021)
# df_to_return argument specifies which data frame you'd like to return, with valid arguments being "gdp" or "exports"
# in USD + years 

wb_gdp <- data.frame()
wb_gdp <- get_wb(3, "gdp")
# view(wb_gdp)

wb_total_exports <- data.frame()
wb_total_exports <- get_wb(3, "exports")
# view(wb_total_exports)
```

## Frequency Conversion

```{r}
#|: function-to-unify-country-naming-conventions-across-countries
# may need to update the countries that are renamed/removed, depending on the data made available by future queries

adjust_names <- function(df) {
  df <- df |>
    mutate(
      reporter = case_when(
        str_detect(reporter, "Bolivia") ~ "Bolivia",
        str_detect(reporter, "Bosnia") ~ "Bosnia and Herzegovina",
        str_detect(reporter, "USA") ~ "United States",
        str_detect(reporter, "Tanzania") ~ "Tanzania",
        str_detect(reporter, "Czech") ~ "Czechia",
        str_detect(reporter, "Dominican Rep") ~ "Dominican Republic", 
        str_detect(reporter, "Hong Kong") ~ "Hong Kong",
        str_detect(reporter, "Moldova") ~ "Moldova",
        str_detect(reporter, "Egypt") ~ "Egypt",
        str_detect(reporter, "Vincent") ~ "St. Vincent and the Grenadines",
        str_detect(reporter, "Slovak") ~ "Slovakia",
        str_detect(reporter, "Viet") ~ "Vietnam",
        str_detect(reporter, "rkiye") ~ "Turkey",
        str_detect(reporter, "Kyrgyz") ~ "Kyrgyzstan",
        str_detect(reporter, "Macedonia") ~ "Macedonia",
        str_detect(reporter, "Macao") ~ "Macao",
        str_detect(reporter, "Palestine") ~ "Palestine",
        str_detect(reporter, "Iran") ~ "Iran",
        str_detect(reporter, "Venezuela") ~ "Venezuela", 
        str_detect(reporter, "Falkland") ~ "Falkland Islands",
        str_detect(reporter, "Marshall") ~ "Marshall Islands",
        str_detect(reporter, "Vatican") ~ "Vatican City",
        str_detect(reporter, "Kosovo") ~ "Kosovo",
        str_detect(reporter, "Lucia") ~ "St. Lucia",
        str_detect(reporter, "Tajik") ~ "Tajikistan",
        str_detect(reporter, "Afghanistan") ~ "Afghanistan",
        str_detect(reporter, "Cuba") ~ "Cuba",
        str_detect(reporter, "Bahamas") ~ "Bahamas",
        str_detect(reporter, "Arab Emirates") ~ "United Arab Emirates",
        str_detect(reporter, "Haiti") ~ "Haiti",
        str_detect(reporter, "Russia") ~ "Russia",
        TRUE ~ reporter
      )
    )
  return(df)
}
```

```{r}
#|: merging-all-data-frames

# need to add countries missing from comtrade_annual to comtrade_monthly (add values too: dupe rows 12x, divide value by 12, add new col w/ first day in each mon repeated (# of countries) times, then replace old date col w/ this new col)
comtrade_pairs_annual |> distinct(reporter) |> view()
comtrade_pairs_monthly |> distinct(reporter) |> view()

# keeping only data for dates common across all dfs
pairs <- comtrade_pairs_monthly |>
  mutate(partner_exports = value) |>
  select(date, partner_exports, reporter, partner)
total <- imf_total_monthly |>
  mutate(total_exports = value) |>
  select(date, total_exports, reporter)
gdp <- wb_gdp
p_dates <- pairs |> distinct(date)
t_dates <- total |> distinct(date)
g_dates <- gdp |> distinct(date)
exp_only_dates <- intersect(p_dates$date, t_dates$date)
gdp_only_dates <- intersect(exp_only_dates, g_dates$date)
pairs <- pairs |> filter(date %in% exp_only_dates)
total <- total |> filter(date %in% exp_only_dates)
gdp <- gdp |> filter(date %in% gdp_only_dates)

# adjusting countries w/ diff names to be same across all dfs
pairs <- adjust_names(pairs)
total <- adjust_names(total)
gdp <- adjust_names(gdp)

# creating df containing all countries in annual but not monthly (for comtrade)
# when adding annual data (reporters + date), divide by 12 AND make sure it's in annual by checking if (dim(df)[1] == 0): no observations, basically checking if NULL
p_annual_reps <- comtrade_pairs_annual |> distinct(reporter)
p_monthly_reps <- comtrade_pairs_monthly |> distinct(reporter)
p_reps_diff <- setdiff(p_annual_reps, p_monthly_reps)
view(p_reps_diff)
view(comtrade_pairs_annual)

# getting all reporting countries shared across all dfs
p_reporters <- pairs |> distinct(reporter)
t_reporters <- total |> distinct(reporter)
g_reporters <- gdp |> distinct(reporter)
reporters <- intersect(intersect(p_reporters, t_reporters), g_reporters)
view(reporters)

# actual merge
# be sure to filter NAs out of merged df (ie, countries that aren't in all dfs)
...
```

```{r}
#|: merging-and-removing-from-dfs
# rough implementation of freq conv to be done on final, merged df
# 1) have vector of first day in each month, then iterate thru it
# 2) get days in month w/ monthDays(), then dupe rows that many times
# 3) divide values by monthDays()
# 4) get first day of the date for the current iteration, then get last day
# 5) get sequence of dates btwn first and last days in month, then dupe that n times, where n = # countries in merged df (ie, get # of DISTINCT countries in reporter column)
# 6) replace old date column in df w/ new dates (the dupe seq of dates from above step)
# 7) freq conv is done: value/date are good to go, everything else will have been carried down
# 8) calc beta = (exports to partner / total exports) * (total exports / total GDP)
# 9) return and dunne!
# 10) save final df and check to make sure values line up

df2 <- imf_total_monthly
df2$date <- as.Date(df2$date)
df2 <- subset(df2, select = -c(reporter_code, partner_name, partner_code, FREQ, year))
row2 <- df2[1, ]
view(row2)
dupe <- df2[rep(1:nrow(row2), each = 31), ]
view(dupe)
day <- row$date[1]
first_day <- floor_date(day, 'month')
last_day <- ceiling_date(day, 'month') - days(1)
date <- c(seq(ymd(first_day), ymd(last_day), "days"))
date <- rep(date, length.out = 10 * length(date))
view(date)
dupe2 <- dupe
dupe2$date <- date
view(dupe2)
```

```{r}
# old function: it works with imf data but not efficient -> scrap later

disaggregate_total_to_daily <- function(df) {
  df$date <- as.Date(df$date)
  total <- data.frame()
  for (i in 1 : nrow(df)) {
    row <- df[i, ]
    obs_date <- ymd(row$date)
    first_day <- floor_date(obs_date, 'month')
    last_day <- ceiling_date(obs_date, 'month') - days(1)
    date <- c(seq(ymd(first_day), ymd(last_day), "days"))
    num_days <- monthDays(obs_date)
    value <- row$value / num_days
    reporter <- row$reporter
    df_month <- data.frame(date)
    df_month$reporter <- reporter
    df_month$value <- value
    total <- rbind(total, df_month)
  }
  return(total)
}
```

```{r}
#|: checking-above-function

df <- imf_total_annual
check <- disaggregate_total_to_daily(df)
view(df)
view(check)
```
