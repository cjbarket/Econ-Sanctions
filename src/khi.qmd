---
title: "beta"
format: html
editor: visual
---

```{r message = FALSE, warning = FALSE}

library("readxl")
library(data.table)
library(plyr)
library(lubridate)
require("plyr")
library(dplyr)
library(ggplot2)
library(hrbrthemes)
library("writexl")
library(tidyverse)
```

```{r}
# loading file containing beta data
# will need to change this code to accomodate our new method of calculating beta (using the beta.qmd file in this src folder)

# file <- "beta_daily.xlsx"
# path <- file.path(dirname(getwd()), "data", file)
# beta <- read_excel(path) #Import external trade and GDP data
# beta$A = beta$Tkj / beta$Tj            #Create A (see p. 28 Bali&Rapelanoro (2021))
# beta$B = beta$Tj / beta$Yj             #Create B (see p. 28 Bali&Rapelanoro (2021))
# beta$beta = beta$A * beta$B            #Create Beta
# colnames(beta) = c("Date", "Tkj", "Tj", "Yj", "A", "B", "beta")
# beta$Date <- as.Date(beta$Date) #Transform column "Date" in date type
# # view(beta)

file <- "combo.xlsx"
path <- file.path(dirname(getwd()), "data", file)
beta <- read_excel(path) #Import external trade and GDP data
beta <- beta |> select(Date, beta)
# view(beta)
```

```{r}
#IMPORTANT: it's also essential to do not leave sanctions with a multiplier equal to 0. If it is so, just erase the line.
# loading sanction list and removing details column

file <- "sanction_list.xlsx"
path <- file.path(dirname(getwd()), "data", file)
sanction.list <- read_excel(path) #Import the sanction list
sanction.list$Details <- NULL #Remove column "details", not used for calculations
sanction.list$Date <- as.Date(sanction.list$Date)

first <- as.Date(min(beta$Date))
last <- as.Date(max(beta$Date))
dates <- c(seq(ymd(first), ymd(last), "days"))
dates <- as.Date(dates)

sanction.list <- sanction.list |> filter(Date %in% dates)
sanclist.ini <- sanction.list #Save the initial list
sanclist.ini <- as.data.frame(sanclist.ini) #Turn sanction list into dataframe
sanclist.ini <- na.omit(sanclist.ini)

# view(sanction.list)
# view(sanclist.ini)
```

```{r}
# setting values for alpha (in Morad's paper)
# will later need to allow for user to pass in their own values if they wish

a.ind <- 1 #Individual Sanction
a.ann <- 10  #Announcement
a.com <- 100  #Sanction against a company
a.sec <- 1000  #Sanction against an economic sector
a.emb <- 3000 #Embargo
```

```{r}
# checking if the dates line up (we might be able to get rid of this once we update the above code chunk, as the new method for obtaining beta values may not need this check... or we'll need to adapt the check)
#Check if the last date of Beta is superior or equal to the last date of sanction list

# if (tail(beta$Date,1) >= tail(sanclist.ini$Date,1)){
#   print("beta_daily.csv and sanction_list.xlsx have compatible ending dates.")
# } else{
#   fin_beta <- tail(beta$Date,1)
#   sanclist.ini$Date[sanclist.ini$Date > as.Date(fin_beta)] <- NA #Replace by NA all dates that are after the last date in beta file.
#   sanclist.ini <- na.omit(sanclist.ini) #Erase rows with NA
#     warning("beta_daily.csv and sanction_list.xlsx do not have compatible dates. The index cannot be calculated if Beta values stop at a date that is prior to the date of a precise sanction! The sanction list has been shortened to fit dates in beta.")
# }
# view(sanclist.ini)
```

```{r}
# another check to make sure the dates line up
#Check if the first date of Beta is superior or equal to the first date of sanction list

# if (head(beta$Date,1) <= head(sanclist.ini$Date,1)){
#   print("beta_daily.csv and sanction_list.xlsx have compatible beginning dates.")
# } else{
#     warning("beta_daily.csv and sanction_list.xlsx do not have compatible dates. The index cannot be calculated if Beta values start after sanctions' dates.")
# }
```

```{r}
# will later add functionality to take in user input to define U, which represents the day at which the sanction loses all effectiveness (here, with a value of 2190, any sanction is assumed to lose effectiveness after 6 years)
# u is a vector from 1 to 2190 (or whatever the max value of U is); u enables us to plot the resulting data we get from this code as a time series
# little u's values will never change
# see the qt_general channel and/or Morad's paper for more details + clarification

khi.U <- 2190 # number of steps starting at day 0 (when sanction is implemented) and ends at day/step 2190             
khi.u <- c(1:khi.U)      #Sets little u between 1 (when the sanction is implemented) to 2190 (when the sanction stops)
khi <- data.frame(khi.u) #Creates Khi dataframe.

#Defining the slope of Khi depending on each sanction type.
khi.o.ind <- 100
khi.o.ann <- 50
khi.o.com <- 1
khi.o.sec <- 5
khi.o.emb <- 15
```

```{r}
# calculating khi (this won't change)

#Khi for sanctions  against individuals:
khi$khi.ind = (1 - (khi$khi.u / khi.U)) ^ khi.o.ind
khi["1", "khi.ind"] <- 1 #First value = 1 as it is when the sanction is implemented.

#Khi for an announcement of sanctions:
khi$khi.ann = (1 - (khi$khi.u / khi.U)) ^ khi.o.ann
khi["1","khi.ann"] <- 1

#Khi for a sanction against a company:
khi$khi.com = (1 - (khi$khi.u / khi.U)) ^ khi.o.com
khi["1","khi.com"] <- 1

#Khi for a sanction against a sector:
khi$khi.sec = (1 - (khi$khi.u / khi.U)) ^ khi.o.sec
khi["1","khi.sec"] <- 1

#Khi for an embargo:
khi$khi.emb = (1 - (khi$khi.u / khi.U)) ^ khi.o.emb
khi["1","khi.emb"] <- 1
```

```{r message = FALSE, warning = FALSE }
# changing type column from character (sanction type) to integer (value of alpha)

sanction.list$Type <- revalue(sanction.list$Type, c("announcement"=a.ann)) #Replace sanctions announcements by its Alpha value
sanction.list$Type <- revalue(sanction.list$Type, c("individual"=a.ind)) #Replace sanctions against individual by its Alpha value
sanction.list$Type <- revalue(sanction.list$Type, c("company"=a.com)) #Replace sanctions against companies by its Alpha value
sanction.list$Type <- revalue(sanction.list$Type, c("sector"=a.sec)) #Replace sanctions against sectors by its Alpha value
sanction.list$Type <- revalue(sanction.list$Type, c("embargo"=a.emb)) #Replace embargo by its Alpha value
# view(sanction.list)
```

```{r}
# cleaning

sanction.list <- na.omit(sanction.list) #Remove rows with missing values
sanction.list$Type <- as.numeric(sanction.list$Type)#Transform column "Type" in numeric values
sanction.list$alpha <- sanction.list$Type * sanction.list$Multiplier #Create the Alpha for each sanction
#Remove Columns Multiplier and Type as they are not going to be used anymore:
sanction.list$Type <- NULL
sanction.list$Multiplier <- NULL
# view(sanction.list)
```

```{r}
# turning into time series so that we can plot our data later
#Creates dt that is a daily time series that starts at the date of the first sanction of the list, and ends at the last date available in Beta. Because if Beta is equal to zero, the index is equal to zero.
dt = data.table(Date=seq(as.Date(head(sanction.list$Date, n=1)), as.Date(tail(beta$Date, n=1)), by="day"))
dt_res <- dt #Creates a dataframe where results will be stored
# view(dt_res)
```

```{r}

setDT(sanction.list)
khi_ind <- khi$khi.ind
khi_ann <- khi$khi.ann
khi_com <- khi$khi.com
khi_sec <- khi$khi.sec
khi_emb <- khi$khi.emb

for (i in sanclist.ini$ID){
  dt2 <- cbind(dt, sanction.list[i,1])
  setDT(dt2)
  dt2 <- sanction.list[dt2, on = c('ID','Date')]
  dt2$alpha[is.na(dt2$alpha)] = 0
  dt2 <- cbind(dt2, sanction.list$ID[i])
  ori_col <- colnames(sanction.list)[1]
  colnames(dt2)[4] <- paste0(ori_col)
  setDT(dt2)
  setDT(beta)
  dt2 <- beta[dt2, on = c('Date')]
  dt2$ID.1 <- NULL
  non_zero <- which(dt2[,4] != 0)
  row_num <- nrow(dt2[,4])
  dt2$alpha[non_zero:row_num] <- dt2$alpha[dt2$alpha != "0"]
  dt2 <- dt2[sanclist.ini, on = c('ID')]
  dt2 <- na.omit(dt2)
  dt2$i.Date <- NULL
  dt2$Multiplier <- NULL
  dt2 <- dt2[dt2$alpha != 0,]
  date <- as.Date(as.double(toString(sanction.list[i,2])), origin = "1970-01-01")
  dates <- as.Date(seq(as.Date(date), by = "day", length.out = khi.U))
  if (dt2$Type[1] == "individual") { khi_to_use <- khi_ind }
  if (dt2$Type[1] == "announcement") { khi_to_use <- khi_ann }
  if (dt2$Type[1] == "company") { khi_to_use <- khi_com }
  if (dt2$Type[1] == "sector") { khi_to_use <- khi_sec }
  if (dt2$Type[1] == "embargo") { khi_to_use <- khi_emb }
  khi_combo <- data.frame(dates, khi_to_use)
  dt2 <- left_join(dt2, khi_combo, by = c("Date" = "dates"))
  dt2 <- dt2 |> mutate(
    khi = case_when(
      is.na(khi) ~ 0,
      TRUE ~ khi
    ),
    sanc = alpha * beta * khi
  )
  dt2$beta <- NULL
  dt2$alpha <- NULL
  dt2$ID <- NULL
  dt2$Type <- NULL
  dt2$khi <- NULL
  dt2$S <- as.data.frame(dt2$S)
  dt_res <- left_join(dt_res, dt2, by=c("Date" = "Date"))
}
```

```{r}

n_sanc <- nrow(sanclist.ini) #Determines the number of sanctions
colnames(dt_res) = c("Date", 1:n_sanc) #Rename each sanction with its ID number.
dt_res$Sindex <- 0   #Create a sanction index column that contains zeros
dt_res[is.na(dt_res)] <-  0 #Replace NA by zeros to avoid issues when summing all sanctions with each other

#Sum each sanction into Sindex that is the final santion index.
dt_res <- as.data.frame(dt_res) #turn it in data frame to run the "for" that follows.
for (i in 2:n_sanc) {
  dt_res$Sindex <- dt_res$Sindex + dt_res[,i]
}
# view(dt_res)
```

```{r}
#Plot the Index:
Date <- as.Date(dt_res$Date)
S_index <- as.numeric(unlist(dt_res$Sindex))
data <- data.frame(Date,S_index)
view(dt_res)

# Plot
ggplot(data, aes(x=dt_res$Date, y=S_index)) + geom_line(color="steelblue") + ylab("Value of the Sanction Index") + xlab("Date") + scale_x_date(date_breaks = "2 month", date_labels = "%m-%Y") + theme_bw() + theme(axis.text.x=element_text(angle=60, hjust=1))
path <- file.path(dirname(getwd()), "data")
ggsave(path = path, filename = "my_plot_check.png")
file <- "example.xlsx"
path <- file.path(dirname(getwd()), "data", file)
write_xlsx(dt_res, path)
```
