---
title: "Testing R Packages"
format: html
editor: visual
---

## R Package Demos

```{r}
#| label: package-installation
#| message: false 
#| warning: false

# load/install all necessary packages

library(tidyverse) 
library(tidymodels)
library(dplyr)
library(tidyquant)
library(alphavantager)
library(zoo)
library(data.table)
library(readxl)

RUBUSD_X_2011_2014_ <- read_excel("~/EconSanctions/data/rubleData/RUBUSD=X (2011-2014).xlsx")

RUBUSD_X_2014_2024_ <- read.csv("~/EconSanctions/data/HistoricalPrices_1.csv")
```

All demos should follow the form below.

```{r}
#| label: tidyquant-demo

# combines the functionality of many packages, including quantmod, PerformanceAnalytics, zoo, xts, and TTR
# contains data for indexes 
# pkg docs: https://cran.r-project.org/web/packages/tidyquant/tidyquant.pdf

#getting the prices for the iShares MSCI South Africa ETF, which tracks the MSCI South Africa 25/50 Index
#eza_prices <- tq_get("EZA", get = "stock.prices")

#getting data for the iShares MSCI Singapore ETF
#ews_prices <- tq_get("EWS", get = "stock.prices")

#getting prices for the iShares MSCI Italy ETF
#ewi_prices <- tq_get("EWI", get = "stock.prices")

#getting data for the iShares MSCI Qatar ETF
#qat_prices <- tq_get("QAT", get = "stock.prices")

#getting data for the iShares MSCI UAE ETF
#uae_prices <- tq_get("UAE", get = "stock.prices")

#getting prices for the Global X MSCI Pakistan ETF
#pak_prices <- tq_get("PAK", get = "stock.prices")

#view(eza_prices)
#view(ews_prices) 
#view(ewi_prices)
#view(qat_prices)
#view(uae_prices)
#view(pak_prices)
```

```{r}
#| label: alphavantager-demo
# supports downloading financial information from Alpha Vantage API
# pkg docs: https://cran.r-project.org/web/packages/alphavantager/alphavantager.pdf 

# uses unique alphavantager key to try to download international stock ETFs

#av_api_key("SC57WJD3FOM5GVYG")
#av_get(symbol     = "DAX",  #Global X DAX Germany ETF
       #av_fun     = "TIME_SERIES_DAILY",
       #outputsize = "full")

#av_get(symbol = "DJIA", #Global X Dow 30 Covered Call ETF
       #av_fun = "TIME_SERIES_DAILY",
       #outputsize = "full")

#av_get(symbol     = "CAC.PAR",  #Lyxor UCITS CAC 40 (DR) D-EUR
       #av_fun     = "TIME_SERIES_DAILY",
       #outputsize = "full")

#av_get(symbol     = "PIN",  #Invesco India ETF
       #av_fun     = "TIME_SERIES_DAILY",
       #outputsize = "full")
```

```{r}
#| label: alphavantager-demo-1
# from Garrett
# Middle East ETF 

#av_api_key("SC57WJD3FOM5GVYG")
# av_get(symbol     = "EIS",  #iShares MSCI Israel ETF
# av_fun     = "TIME_SERIES_DAILY",
# outputsize = "compact")

#av_get(symbol     = "KSA",  #iShares MSCI Saudi Arabia ETF
       #av_fun     = "TIME_SERIES_DAILY",
       #outputsize = "compact")

# av_get(symbol     = "TSE", #Tried TEPIX, TSE, both work but not the correct index
#        av_fun     = "TIME_SERIES_DAILY",
#        outputsize = "full")
```

```{r}
#| label: alphavantager-demo-1-(cot'd)
# from Garrett
# using search function

#Alphavantager ticker search: URL below uses keywords and unique API key to list ETF, mutual fund, and equity symbols to use in alphavantager package. Conclusion after using search function: international stock index data not available in package.  

# https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=FILLHERE&apikey=FILLHERE 
```

```{r}
#| label: alphavantager-demo-2
# from Jayson
# Example: fetching USD/RUB exchange rate data

#av_api_key("AKODC2XAAZIFHH9J")
#symbol <- "USD/RUB"
#forex_data <- av_get(symbol, av_fun = "FX_DAILY", outputsize = "compact")
#head(forex_data) # xts object
```

```{r}
#| label: RWA trial
# from ishrit

ruble11_14 <- RUBUSD_X_2011_2014_
# ruble11_14 |>
#   rollapply("Open", 65, mean)

# ruble11_14 <- ruble11_14 |>
# mutate(as.Date("Date"))

ruble11_14$Month <- months(ruble11_14$Date)
ruble11_14$Year<-format(ruble11_14$Date,format="%y")

ruble11_14 <- ruble11_14 |>
  mutate(Qtr = as.yearqtr(as.Date(Date)))|>
  mutate(Open = as.numeric(Open))|>
  mutate(Open = 1/Open)|>
  drop_na()

tapply(ruble11_14$Open, ruble11_14$Qtr, mean)

means <- rollmean(ruble11_14$Open, 64)
plot(means, type = "b")

maxes <- rollmax(ruble11_14$Open, 64)
plot(maxes, type = "b")

medians <- rollmedian(ruble11_14$Open, 64)
plot(medians, type = "b")

sums <- rollsum(ruble11_14$Open, 64)
plot(sums, type = "b")
```

```{r}
#| label: RWA-2014-2022

means <- rollmean(RUBUSD_X_2014_2024_$Open, 64)
plot(means, type = "b")

maxes <- rollmax(RUBUSD_X_2014_2024_$Open, 64)
plot(maxes, type = "b")

medians <- rollmedian(RUBUSD_X_2014_2024_$Open, 64)
plot(medians, type = "b")

sums <- rollsum(RUBUSD_X_2014_2024_$Open, 64)
plot(sums, type = "b")
```
