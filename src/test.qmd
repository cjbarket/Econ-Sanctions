---
title: "Testing R Packages"
format: html
editor: visual
---

## R Package Demos

```{r message=false, warning=false}
#|: package-installation
# load/install all necessary packages

# install.packages("tidyverse")
# install.packages("tidymodels")
# install.packages("quantmod")
# install.packages(c("rvest", "dplyr"))
# install.packages("Quandl")
# install.packages("tidyquant")
# install.packages("yfR")
install.packages("alphavantager")

library(tidyverse) 
library(tidymodels)
library(quantmod)
library(rvest)
library(dplyr)
# library(Quandl)
# library(tidyquant)
# library(yfR)
library(alphavantager)
```

All demos should follow the form below.

```{r}
#|: quantmod-demo
# fetch Yahoo Finance data starting from 2010 for ticker QQQ
# pkg docs: https://cran.r-project.org/web/packages/quantmod/quantmod.pdf
# current srcs available (from pkg docs): yahoo, google, MySQL, FRED, csv, RData, oanda, and av
# yahoo is only working src (currently) but the getSymbols() method is compatible with the following and csv, mysql, and rdata:
# yahoo finance - available data: https://finance.yahoo.com/world-indices/
# google finance - https://www.google.com/finance/markets/indexes?hl=en
# oanda - https://www.oanda.com/rw-en/trading/instruments/
# orats - $99/month minimum
# alphavantage - can search symbols with a free api key. ex: https://www.alphavantage.co/query?function=SYMBOL_SEARCH&datatype=csv&keywords=Index&apikey=
# federal reserve - https://fred.stlouisfed.org/
''

options(max.print = 100000) # to view all rows
getSymbols("QQQ", from="2010-01-01", src="yahoo") # loading QQQ xts object into environment
QQQ <- as.data.frame(QQQ)
view(QQQ)
```

```{r}
#|: tidyquant-demo

# combines the functionality of many packages, including quantmod, PerformanceAnalytics, zoo, xts, and TTR
# contains data for indexes 
# pkg docs: https://cran.r-project.org/web/packages/tidyquant/tidyquant.pdf

#getting the prices for the iShares MSCI South Africa ETF, which tracks the MSCI South Africa 25/50 Index
eza_prices <- tq_get("EZA", get = "stock.prices")

#getting data for the iShares MSCI Singapore ETF
ews_prices <- tq_get("EWS", get = "stock.prices")

#getting prices for the iShares MSCI Italy ETF
ewi_prices <- tq_get("EWI", get = "stock.prices")

#getting data for the iShares MSCI Qatar ETF
qat_prices <- tq_get("QAT", get = "stock.prices")

#getting data for the iShares MSCI UAE ETF
uae_prices <- tq_get("UAE", get = "stock.prices")

#getting prices for the Global X MSCI Pakistan ETF
pak_prices <- tq_get("PAK", get = "stock.prices")

view(eza_prices)
view(ews_prices) 
view(ewi_prices)
view(qat_prices)
view(uae_prices)
view(pak_prices)



```

```{r}
#|: quandl-demo
# supports both time-series data and data tables
# pkg docs: https://cran.r-project.org/web/packages/Quandl/Quandl.pdf

# getting data for AAPL (Apple) ticker
appl_quandl <- Quandl('WIKI/AAPL')
view(appl_quandl)

# getting data for specific time frame
appl_limited_quandl = Quandl("WIKI/AAPL", start_date = "2015-01-01", end_date = "2022-12-31")
view(appl_limited_quandl)

#getting data for the NASDAQ Europe Index
neurope_data = Quandl("NASDAQOMX/NQEU") 
view(neurope_data)

```

```{r}
#|: yfR-demo
# supports downloading time series stock market data from Yahoo Finance 
# pkg docs: https://docs.ropensci.org/yfR/

# downloads ten years of financial data for Target (TGT) with date and frequency specifications
first_date <- Sys.Date() - 3650
last_date <- Sys.Date()
TGT <- yf_get("TGT", first_date = first_date, last_date = last_date, freq_data = "daily") 
view(TGT)
```

```{r}
#|: alphavantager-demo

# supports downloading financial information from Alpha Vantage API
# pkg docs: https://cran.r-project.org/web/packages/alphavantager/alphavantager.pdf 

# uses unique alphavantager key to download 5,000 days worth of EUR/USD exhchange rate data (from 08/27/04) 
av_api_key("SC57WJD3FOM5GVYG")
av_get(symbol     = "DAX",
       av_fun     = "TIME_SERIES_DAILY",
       outputsize = "full")
av_get(symbol     = "STI",
       av_fun     = "TIME_SERIES_DAILY",
       outputsize = "full")
av_get(symbol     = "CHI",
       av_fun     = "TIME_SERIES_DAILY",
       outputsize = "full")
```
